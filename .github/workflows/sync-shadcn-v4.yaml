name: Sync shadcn/ui v4 for Monorepo with Tailwind CSS v4

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: "0 0 * * 1" # 매주 월요일 자정에 실행
  workflow_dispatch: # 수동 실행 가능
  push:
    branches:
      - main

jobs:
  sync:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' &&
       github.ref == 'refs/heads/main' &&
       (contains(github.event.head_commit.message, 'Merge pull request') &&
        contains(github.event.head_commit.message, 'sync/shadcn-v4')))

    steps:
      - name: Debug Event Information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Commit message: ${{ github.event.head_commit.message }}"
          echo "날짜 및 시간: $(date)"

      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and prepare sync branch
        run: |
          git checkout -b sync/shadcn-v4-monorepo || git checkout sync/shadcn-v4-monorepo
          git reset --hard origin/main
          echo "현재 브랜치: $(git branch --show-current)"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq rsync

      - name: Clone shadcn/ui v4
        run: git clone --depth=1 https://github.com/shadcn-ui/ui.git tmp-shadcn-ui

      - name: Debug Directory Structure
        run: |
          echo "========== Repository Structure =========="
          ls -la
          echo "========== packages/ui Structure =========="
          ls -la packages/ui/src || echo "packages/ui/src directory does not exist yet"
          echo "========== shadcn v4 registry components =========="
          ls -la tmp-shadcn-ui/apps/v4/registry/new-york-v4/ui || echo "V4 registry components directory does not exist"

      - name: Create required directories
        run: |
          mkdir -p packages/ui/src/components
          mkdir -p packages/ui/src/lib
          mkdir -p packages/ui/src/hooks
          mkdir -p packages/ui/src/styles

      - name: Check if running after sync/shadcn-v4 merge
        id: check-merge
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" &&
                "${{ contains(github.event.head_commit.message, 'Merge pull request') }}" == "true" &&
                "${{ contains(github.event.head_commit.message, 'sync/shadcn-v4') }}" == "true" ]]; then
            echo "sync/shadcn-v4 브랜치가 main에 병합되었습니다. 모든 컴포넌트를 강제로 가져옵니다."
            echo "force_sync=true" >> $GITHUB_OUTPUT
          else
            echo "일반적인 실행으로 계속합니다."
            echo "force_sync=false" >> $GITHUB_OUTPUT
          fi

      - name: Sync from v4 registry components
        run: |
          echo "Syncing components from v4 registry..."

          # V4 레지스트리 존재 확인
          if [ ! -d "tmp-shadcn-ui" ]; then
            echo "ERROR: tmp-shadcn-ui 디렉토리가 존재하지 않습니다."
            exit 1
          fi

          # 디렉토리 구조 디버깅
          echo "=== 디렉토리 구조 확인 ==="
          ls -la tmp-shadcn-ui
          ls -la tmp-shadcn-ui/apps/v4/registry || echo "V4 registry path does not exist"

          # V4 New York 레지스트리 컴포넌트 동기화
          if [ -d tmp-shadcn-ui/apps/v4/registry/new-york-v4/ui ]; then
            echo "=== V4 New York 레지스트리 컴포넌트 동기화 ==="

            # force_sync가 true인 경우 --delete 옵션 추가하여 기존 파일을 덮어쓰기
            if [[ "${{ steps.check-merge.outputs.force_sync }}" == "true" ]]; then
              echo "모든 컴포넌트를 강제로 동기화합니다. 기존 파일을 덮어씁니다."
              rsync -av --delete --exclude="*-demo.tsx" --exclude="*.stories.tsx" --exclude="*.test.tsx" \
                tmp-shadcn-ui/apps/v4/registry/new-york-v4/ui/ packages/ui/src/components/ | tee rsync-components.log
            else
              # 일반 동기화 - 기존 파일 보존
              rsync -av --exclude="*-demo.tsx" --exclude="*.stories.tsx" --exclude="*.test.tsx" \
                tmp-shadcn-ui/apps/v4/registry/new-york-v4/ui/ packages/ui/src/components/ | tee rsync-components.log
            fi

            # rsync 결과 확인
            if [ $? -ne 0 ]; then
              echo "RSYNC ERROR: 컴포넌트 동기화 중 오류가 발생했습니다."
              cat rsync-components.log
              exit 1
            fi

            # 동기화 결과 확인
            echo "=== 동기화 결과 확인 ==="
            ls -la packages/ui/src/components/ || echo "컴포넌트 디렉토리가 존재하지 않습니다."

            # utils, lib 동기화
            if [ -d tmp-shadcn-ui/apps/v4/registry/new-york-v4/lib ]; then
              echo "=== V4 New York 레지스트리 lib 동기화 ==="
              rsync -av $([[ "${{ steps.check-merge.outputs.force_sync }}" == "true" ]] && echo "--delete") \
                tmp-shadcn-ui/apps/v4/registry/new-york-v4/lib/ packages/ui/src/lib/ | tee rsync-lib.log
            fi

            # hooks 동기화
            if [ -d tmp-shadcn-ui/apps/v4/registry/new-york-v4/hooks ]; then
              echo "=== V4 New York 레지스트리 hooks 동기화 ==="
              rsync -av $([[ "${{ steps.check-merge.outputs.force_sync }}" == "true" ]] && echo "--delete") \
                tmp-shadcn-ui/apps/v4/registry/new-york-v4/hooks/ packages/ui/src/hooks/ | tee rsync-hooks.log
            fi

            # styles 동기화
            if [ -d tmp-shadcn-ui/apps/v4/registry/new-york-v4/styles ]; then
              echo "=== V4 New York 레지스트리 styles 동기화 ==="
              rsync -av $([[ "${{ steps.check-merge.outputs.force_sync }}" == "true" ]] && echo "--delete") \
                tmp-shadcn-ui/apps/v4/registry/new-york-v4/styles/ packages/ui/src/styles/ | tee rsync-styles.log
            fi

            # components.json 파일 동기화 (존재하는 경우)
            if [ -f tmp-shadcn-ui/apps/v4/registry/new-york-v4/components.json ]; then
              echo "=== V4 New York 레지스트리 components.json 동기화 ==="
              cp tmp-shadcn-ui/apps/v4/registry/new-york-v4/components.json packages/ui/
              # Tailwind CSS v4 호환성을 위해 tailwind.config 비움
              jq '.tailwind.config = ""' packages/ui/components.json > packages/ui/components.json.tmp
              mv packages/ui/components.json.tmp packages/ui/components.json
            fi

            # 강제로 변경사항 생성 (타임스탬프 파일)
            echo "현재 동기화 시간: $(date)" > packages/ui/src/.sync-timestamp

            # 변경사항이 있음을 표시
            touch .sync-changes-detected
          else
            echo "ERROR: V4 registry components directory not found at apps/v4/registry/new-york-v4/ui"
            exit 1
          fi

      - name: Clean up temporary files
        run: rm -rf tmp-shadcn-ui

      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          else
            echo "GitHub CLI already installed"
          fi

      - name: Check for changes
        id: check_changes
        run: |
          echo "Checking for changes..."
          git_status=$(git status --porcelain)
          echo "Git status output: $git_status"

          # 변경 사항 확인
          if [ -z "$git_status" ]; then
            echo "변경 사항이 없습니다. 가능한 문제:"
            echo "1. 소스 디렉토리에 파일이 없음"
            echo "2. rsync 명령이 실패함"
            echo "3. 이미 모든 파일이 최신 상태임"

            # 소스 디렉토리 확인
            echo "소스 디렉토리 확인:"
            find tmp-shadcn-ui -name "*.tsx" | head -5 || echo "소스 파일을 찾을 수 없습니다."

            # 대상 디렉토리 확인
            echo "대상 디렉토리 확인:"
            find packages/ui/src -type f | head -5 || echo "대상 디렉토리에 파일이 없습니다."

            # 강제로 변경사항 생성
            echo "변경 사항이 없어 강제로 변경사항 생성"
            echo "# Shadcn UI V4 Sync - $(date)" >> README.md
            git_status="README.md"
          fi

          # 항상 PR 생성을 위해 변경사항을 만듦
          echo "changes=true" >> $GITHUB_OUTPUT
          git add .
          git commit -m "chore: sync shadcn/ui v4 components for monorepo"
          git push -f origin sync/shadcn-v4-monorepo
          echo "Changes pushed to sync/shadcn-v4-monorepo branch"

      - name: Create Pull Request
        if: steps.check_changes.outputs.changes == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          commit-message: "chore: sync shadcn/ui v4 components for monorepo"
          title: "chore: sync shadcn/ui v4 components for monorepo"
          body: |
            # shadcn/ui v4 컴포넌트 동기화

            이 PR은 shadcn/ui v4의 monorepo 템플릿에서 컴포넌트, 유틸리티, 훅, 스타일을 동기화합니다.

            ## 동기화된 항목
            - 컴포넌트 (`/src/components/`)
            - 유틸리티 (`/src/lib/`)
            - 훅 (`/src/hooks/`)
            - 스타일 (`/src/styles/`)
            - 설정 (`components.json`)

            ## Tailwind CSS v4 호환성

            이 PR은 Tailwind CSS v4와 호환되도록 업데이트되었습니다.

            변경사항을 검토하고 필요한 경우 수정 후 머지해주세요.
          branch: "sync/shadcn-v4-monorepo"
          base: "main"
          labels: "dependencies,ui,shadcn"
          delete-branch: false

      - name: PR Result
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Create PR 액션 결과: ${{ steps.create-pr.outputs.pull-request-number }}"
          if [ -n "${{ steps.create-pr.outputs.pull-request-number }}" ]; then
            echo "Pull Request 생성됨: sync/shadcn-v4-monorepo → main (PR #${{ steps.create-pr.outputs.pull-request-number }})"
            echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          else
            echo "PR이 생성되지 않았습니다. 가능한 원인:"
            echo "1. 이미 동일한 내용의 PR이 존재"
            echo "2. 브랜치 간에 차이가 없음"
            echo "3. 토큰 권한 문제"

            # 기존 PR 확인
            echo "기존 PR 확인 중..."
            EXISTING_PR=$(gh pr list --base main --head sync/shadcn-v4-monorepo --json number,url --jq '.[0]')
            if [ -n "$EXISTING_PR" ]; then
              echo "기존 PR이 발견되었습니다: $EXISTING_PR"
            fi

            # 브랜치 차이 확인
            echo "브랜치 차이 확인 중..."
            DIFF_COUNT=$(git diff origin/main..sync/shadcn-v4-monorepo --name-only | wc -l)
            echo "브랜치 간 변경된 파일 수: $DIFF_COUNT"
          fi
