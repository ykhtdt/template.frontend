name: Sync shadcn/ui v4 for Monorepo with Tailwind CSS v4

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: "0 0 * * 1"
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  sync:
    runs-on: ubuntu-latest

    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' &&
       github.ref == 'refs/heads/main' &&
       contains(github.event.head_commit.message, 'Merge pull request') &&
       contains(github.event.head_commit.message, 'sync/shadcn-v4'))

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          echo "::group::Git 사용자 설정"
          echo "GitHub Actions 봇 사용자로 Git 설정"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          echo "Git 사용자 설정 완료"
          echo "::endgroup::"

      - name: Setup GitHub CLI
        run: |
          echo "::group::GitHub CLI 설정"
          echo "GitHub CLI 버전 확인: $(gh --version | head -n 1)"
          echo "사전 설치된 GitHub CLI 사용"
          echo "::endgroup::"

      - name: Install dependencies
        run: |
          echo "::group::의존성 설치"
          echo "시스템 패키지 업데이트 중..."
          sudo apt-get update -qq
          echo "jq 패키지 설치 중..."
          sudo apt-get install -qq -y jq
          echo "필요한 의존성 설치 완료"
          echo "::endgroup::"

      - name: Generate unique branch name
        id: branch
        run: |
          echo "::group::브랜치 생성"
          # 고유한 타임스탬프 생성
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="sync/shadcn-ui-v4-$TIMESTAMP"
          echo "생성된 브랜치 이름: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # 새 브랜치 생성
          echo "main 브랜치에서 새 브랜치 생성 중..."
          git checkout -b "$BRANCH_NAME" origin/main
          echo "브랜치 $BRANCH_NAME 생성 완료"
          echo "::endgroup::"

      - name: Clone shadcn/ui v4
        run: |
          echo "::group::shadcn/ui v4 레포지토리 클론"
          echo "shadcn/ui 저장소 클론 중..."
          git clone --depth=1 https://github.com/shadcn-ui/ui.git tmp-shadcn-ui
          echo "shadcn/ui 저장소 클론 완료"
          echo "::endgroup::"

      - name: Debug shadcn/ui structure
        run: |
          echo "::group::shadcn/ui 구조 확인"
          echo "shadcn/ui 저장소 구조 확인 중..."

          # 루트 디렉토리 확인
          echo "루트 디렉토리 내용:"
          ls -la tmp-shadcn-ui

          # apps 디렉토리 확인
          echo "apps 디렉토리 확인 중..."
          ls -la tmp-shadcn-ui/apps || echo "apps 디렉토리를 찾을 수 없습니다"

          # v4 디렉토리 구조 확인
          if [ -d "tmp-shadcn-ui/apps/v4" ]; then
            echo "v4 디렉토리 내용:"
            ls -la tmp-shadcn-ui/apps/v4

            echo "registry 디렉토리 확인 중..."
            ls -la tmp-shadcn-ui/apps/v4/registry || echo "registry 디렉토리를 찾을 수 없습니다"

            if [ -d "tmp-shadcn-ui/apps/v4/registry/new-york-v4" ]; then
              echo "new-york-v4 디렉토리 내용:"
              ls -la tmp-shadcn-ui/apps/v4/registry/new-york-v4
            fi
          fi
          echo "shadcn/ui 구조 확인 완료"
          echo "::endgroup::"

      - name: Copy components from shadcn/ui v4
        run: |
          echo "::group::컴포넌트 복사"

          # 필요한 디렉토리 생성
          echo "대상 디렉토리 생성 중..."
          mkdir -p packages/ui/src/{components,lib,hooks,styles}
          echo "디렉토리 생성 완료"

          echo "shadcn-ui 컴포넌트 복사 시작 - 소스: tmp-shadcn-ui/apps/v4/registry/new-york-v4"

          # 소스와 대상 디렉토리 변수 정의
          SRC_BASE="tmp-shadcn-ui/apps/v4/registry/new-york-v4"
          DEST_BASE="packages/ui/src"

          # UI 컴포넌트 복사
          UI_SRC="$SRC_BASE/ui"
          UI_DEST="$DEST_BASE/components"
          if [ -d "$UI_SRC" ]; then
            echo "UI 컴포넌트 복사 중: $UI_SRC -> $UI_DEST"
            cp -rv "$UI_SRC"/* "$UI_DEST"/
            echo "UI 컴포넌트 복사 완료"
          else
            echo "오류: 예상 경로에서 UI 컴포넌트 디렉토리를 찾을 수 없습니다"
            echo "가능한 UI 디렉토리 검색 중..."
            find tmp-shadcn-ui -name "ui" -type d | xargs ls -la 2>/dev/null || echo "UI 디렉토리를 찾을 수 없습니다"
            exit 1
          fi

          # 라이브러리 파일 복사
          LIB_SRC="$SRC_BASE/lib"
          LIB_DEST="$DEST_BASE/lib"
          if [ -d "$LIB_SRC" ]; then
            echo "라이브러리 파일 복사 중: $LIB_SRC -> $LIB_DEST"
            cp -rv "$LIB_SRC"/* "$LIB_DEST"/
            echo "라이브러리 파일 복사 완료"
          else
            echo "경고: 예상 경로에서 라이브러리 디렉토리를 찾을 수 없습니다"
            echo "가능한 lib 디렉토리 검색 중..."
            find tmp-shadcn-ui -name "lib" -type d | xargs ls -la 2>/dev/null || echo "lib 디렉토리를 찾을 수 없습니다"
          fi

          # 훅 파일 복사
          HOOKS_SRC="$SRC_BASE/hooks"
          HOOKS_DEST="$DEST_BASE/hooks"
          if [ -d "$HOOKS_SRC" ]; then
            echo "훅 파일 복사 중: $HOOKS_SRC -> $HOOKS_DEST"
            cp -rv "$HOOKS_SRC"/* "$HOOKS_DEST"/
            echo "훅 파일 복사 완료"
          else
            echo "경고: 예상 경로에서 훅 디렉토리를 찾을 수 없습니다"
            echo "가능한 hooks 디렉토리 검색 중..."
            find tmp-shadcn-ui -name "hooks" -type d | xargs ls -la 2>/dev/null || echo "hooks 디렉토리를 찾을 수 없습니다"
          fi

          # 스타일 파일 복사
          STYLES_SRC="$SRC_BASE/styles"
          STYLES_DEST="$DEST_BASE/styles"
          if [ -d "$STYLES_SRC" ]; then
            echo "스타일 파일 복사 중: $STYLES_SRC -> $STYLES_DEST"
            cp -rv "$STYLES_SRC"/* "$STYLES_DEST"/
            echo "스타일 파일 복사 완료"
          else
            echo "경고: 예상 경로에서 스타일 디렉토리를 찾을 수 없습니다"
            echo "가능한 styles 디렉토리 검색 중..."
            find tmp-shadcn-ui -name "styles" -type d | xargs ls -la 2>/dev/null || echo "styles 디렉토리를 찾을 수 없습니다"
          fi

          # 복사 결과 확인
          echo "복사된 디렉토리 내용 확인 중..."
          echo "컴포넌트 디렉토리:"
          ls -la "$UI_DEST"
          echo "라이브러리 디렉토리:"
          ls -la "$LIB_DEST" 2>/dev/null || echo "복사된 lib 파일 없음"
          echo "훅 디렉토리:"
          ls -la "$HOOKS_DEST" 2>/dev/null || echo "복사된 hooks 파일 없음"
          echo "스타일 디렉토리:"
          ls -la "$STYLES_DEST" 2>/dev/null || echo "복사된 styles 파일 없음"
          echo "컴포넌트 복사 완료"
          echo "::endgroup::"

      - name: Add timestamp to ensure differences
        run: |
          echo "::group::타임스탬프 파일 생성"
          # 타임스탬프를 포함한 파일 생성으로 항상 main과 차이가 있도록 보장
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          TIMESTAMP_FILE="packages/ui/src/SYNC_TIMESTAMP.md"

          echo "타임스탬프 파일 생성 중: $TIMESTAMP_FILE"
          echo "# shadcn/ui v4 sync timestamp (UTC): $TIMESTAMP" > "$TIMESTAMP_FILE"
          echo "Last synced from shadcn/ui v4 on $TIMESTAMP (UTC)" >> "$TIMESTAMP_FILE"
          echo "Repository: https://github.com/shadcn-ui/ui" >> "$TIMESTAMP_FILE"
          echo "Sync workflow run: $GITHUB_RUN_ID" >> "$TIMESTAMP_FILE"

          echo "타임스탬프 파일 생성 완료"
          echo "::endgroup::"

      - name: Clean up temporary files
        run: |
          echo "::group::임시 파일 정리"
          echo "임시 shadcn/ui 클론 디렉토리 삭제 중..."
          rm -rf tmp-shadcn-ui
          echo "임시 파일 정리 완료"
          echo "::endgroup::"

      - name: Check for changes
        id: changes
        run: |
          echo "::group::변경사항 확인"
          echo "Git 상태 확인 중..."
          git status

          # 변경사항 여부 확인 변수 설정
          HAS_CHANGES=false
          ONLY_MD_CHANGES=false

          # 커밋할 변경사항이 있는지 확인
          if [ -z "$(git status --porcelain)" ]; then
            echo "변경사항이 감지되지 않았습니다"
            HAS_CHANGES=false
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "변경사항이 감지되었습니다"
            HAS_CHANGES=true
            echo "changes=true" >> $GITHUB_OUTPUT

            # 변경된 파일 목록 가져오기
            CHANGED_FILES=$(git diff --name-only --staged || git diff --name-only)
            echo "변경된 파일 목록:"
            echo "$CHANGED_FILES"

            # 실제 코드 파일(md 파일 제외)이 변경되었는지 확인
            NON_MD_CHANGES=$(echo "$CHANGED_FILES" | grep -v "\.md$" || true)
            if [ -z "$NON_MD_CHANGES" ]; then
              echo "마크다운 파일만 변경되었습니다"
              ONLY_MD_CHANGES=true
              echo "only_md_changes=true" >> $GITHUB_OUTPUT
            else
              echo "코드 파일이 변경되었습니다"
              ONLY_MD_CHANGES=false
              echo "only_md_changes=false" >> $GITHUB_OUTPUT
            fi
          fi
          echo "변경사항 확인 완료"
          echo "::endgroup::"

      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          echo "::group::변경사항 커밋 및 푸시"
          BRANCH_NAME="${{ steps.branch.outputs.branch_name }}"
          TIMESTAMP=$(date +"%Y-%m-%d")
          COMMIT_MSG="chore: sync shadcn/ui v4 components for monorepo [$TIMESTAMP]"

          echo "변경사항 스테이징 중..."
          git add .

          echo "변경사항 커밋 중: $COMMIT_MSG"
          git commit -m "$COMMIT_MSG"

          echo "$BRANCH_NAME 브랜치에 변경사항 푸시 중..."
          if git push -u origin "$BRANCH_NAME"; then
            echo "푸시 성공"
          else
            echo "푸시 실패"
            exit 1
          fi
          echo "변경사항 커밋 및 푸시 완료"
          echo "::endgroup::"

      - name: Create Pull Request
        if: steps.changes.outputs.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ steps.branch.outputs.branch_name }}
          ONLY_MD_CHANGES: ${{ steps.changes.outputs.only_md_changes }}
        run: |
          echo "::group::PR 생성"
          # PR 제목 설정
          PR_DATE=$(date +"%Y-%m-%d")
          TITLE="chore: sync shadcn/ui v4 components for monorepo [$PR_DATE UTC]"
          echo "PR 제목: $TITLE"

          # 저장소 소유자 정보 가져오기
          echo "저장소 소유자 정보 가져오기..."
          REPO_OWNER=$(gh repo view --json owner -q .owner.login)
          echo "저장소 소유자: $REPO_OWNER"

          # PR 본문 생성
          echo "PR 본문 파일 생성 중..."
          PR_BODY_FILE=$(mktemp)
          echo "임시 PR 본문 파일 생성됨: $PR_BODY_FILE"

          # 변경 내용 알림 메시지 작성
          NOTICE_MSG=""
          if [ "$ONLY_MD_CHANGES" = "true" ]; then
            echo "마크다운 파일만 변경되었음을 알리는 메시지 작성 중..."
            NOTICE_MSG=$(cat << EON

          ## ⚠️ 변경된 코드 파일 없음 ⚠️

          **이 PR에는 실제 코드 변경사항이 없습니다. 타임스탬프 파일만 업데이트되었습니다.**

          현재 shadcn/ui v4와 이미 동기화된 상태입니다.

          EON
            )
          fi

          # PR 본문 작성
          echo "PR 본문 작성 중..."
          cat > "$PR_BODY_FILE" << EOL
          # shadcn/ui v4 컴포넌트 동기화

          이 PR은 shadcn/ui v4의 monorepo 템플릿에서 컴포넌트, 유틸리티, 훅, 스타일을 동기화합니다.
          $NOTICE_MSG
          ## 동기화된 항목
          - 컴포넌트 (\`/src/components/\`)
          - 유틸리티 (\`/src/lib/\`)
          - 훅 (\`/src/hooks/\`)
          - 스타일 (\`/src/styles/\`)

          ## Tailwind CSS v4 호환성

          이 PR은 Tailwind CSS v4와 호환되도록 업데이트되었습니다.

          변경사항을 검토하고 필요한 경우 수정 후 머지해주세요.

          동기화 타임스탬프 (UTC): $(date +"%Y-%m-%d %H:%M:%S")
          워크플로우 실행 ID: ${GITHUB_RUN_ID}
          EOL

          echo "main 브랜치에서 $BRANCH_NAME 브랜치로 PR 생성 중..."

          # PR 생성 - 리뷰어는 지정하고 라벨은 나중에 추가
          echo "PR 생성 중..."
          PR_URL=$(gh pr create --base main --head "$BRANCH_NAME" --title "$TITLE" --body-file "$PR_BODY_FILE" --reviewer "$REPO_OWNER")
          PR_STATUS=$?

          if [ $PR_STATUS -eq 0 ]; then
            echo "PR 생성 성공: $PR_URL"
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

            # PR 라벨 추가
            echo "PR 라벨 추가 중..."
            if [ "$ONLY_MD_CHANGES" = "true" ]; then
              # 변경 없음 라벨 추가
              echo "no-code-changes 라벨 추가 중..."
              gh pr edit "$BRANCH_NAME" --add-label "no-code-changes" || echo "no-code-changes 라벨 추가 실패, 계속 진행합니다"
            else
              # 일반 라벨 추가
              echo "enhancement 라벨 추가 중..."
              gh pr edit "$BRANCH_NAME" --add-label "enhancement" || echo "enhancement 라벨 추가 실패, 계속 진행합니다"
            fi
          else
            echo "PR 생성 실패"
            exit 1
          fi
          echo "PR 생성 프로세스 완료"
          echo "::endgroup::"
