name: Sync shadcn/ui v4 for Monorepo with Tailwind CSS v4

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: "0 0 * * 1"
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  sync:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' &&
       github.ref == 'refs/heads/main' &&
       contains(github.event.head_commit.message, 'Merge pull request') &&
       contains(github.event.head_commit.message, 'sync/shadcn-v4'))

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate unique branch name
        id: branch
        run: |
          # 고유한 타임스탬프 생성
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="sync/shadcn-ui-v4-$TIMESTAMP"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using branch name: $BRANCH_NAME"

          # 새 브랜치 생성
          git checkout -b "$BRANCH_NAME" origin/main

      - name: Clone shadcn/ui v4
        run: git clone --depth=1 https://github.com/shadcn-ui/ui.git tmp-shadcn-ui

      - name: Debug shadcn/ui structure
        run: |
          echo "Checking shadcn/ui repository structure..."
          ls -la tmp-shadcn-ui
          ls -la tmp-shadcn-ui/apps || echo "apps directory not found"
          if [ -d "tmp-shadcn-ui/apps/v4" ]; then
            ls -la tmp-shadcn-ui/apps/v4
            ls -la tmp-shadcn-ui/apps/v4/registry || echo "registry directory not found"
            if [ -d "tmp-shadcn-ui/apps/v4/registry/new-york-v4" ]; then
              ls -la tmp-shadcn-ui/apps/v4/registry/new-york-v4
            fi
          fi

      - name: Copy components from shadcn/ui v4
        run: |
          echo "Creating directories..."
          mkdir -p packages/ui/src/{components,lib,hooks,styles}

          echo "Copying from known structure at tmp-shadcn-ui/apps/v4/registry/new-york-v4..."

          # Copy UI components
          if [ -d "tmp-shadcn-ui/apps/v4/registry/new-york-v4/ui" ]; then
            cp -rv tmp-shadcn-ui/apps/v4/registry/new-york-v4/ui/* packages/ui/src/components/
            echo "UI components copied successfully"
          else
            echo "Error: UI components directory not found at expected path"
            # Try to find the correct path
            find tmp-shadcn-ui -name "ui" -type d | xargs ls -la 2>/dev/null || echo "No ui directories found"
            exit 1
          fi

          # Copy lib files
          if [ -d "tmp-shadcn-ui/apps/v4/registry/new-york-v4/lib" ]; then
            cp -rv tmp-shadcn-ui/apps/v4/registry/new-york-v4/lib/* packages/ui/src/lib/
            echo "Lib files copied successfully"
          else
            echo "Warning: Lib directory not found at expected path"
            # Try to find the correct path
            find tmp-shadcn-ui -name "lib" -type d | xargs ls -la 2>/dev/null || echo "No lib directories found"
          fi

          # Copy hooks
          if [ -d "tmp-shadcn-ui/apps/v4/registry/new-york-v4/hooks" ]; then
            cp -rv tmp-shadcn-ui/apps/v4/registry/new-york-v4/hooks/* packages/ui/src/hooks/
            echo "Hooks copied successfully"
          else
            echo "Warning: Hooks directory not found at expected path"
            # Try to find the correct path
            find tmp-shadcn-ui -name "hooks" -type d | xargs ls -la 2>/dev/null || echo "No hooks directories found"
          fi

          # Copy styles
          if [ -d "tmp-shadcn-ui/apps/v4/registry/new-york-v4/styles" ]; then
            cp -rv tmp-shadcn-ui/apps/v4/registry/new-york-v4/styles/* packages/ui/src/styles/
            echo "Styles copied successfully"
          else
            echo "Warning: Styles directory not found at expected path"
            # Try to find the correct path
            find tmp-shadcn-ui -name "styles" -type d | xargs ls -la 2>/dev/null || echo "No styles directories found"
          fi

          echo "Checking destination directories..."
          ls -la packages/ui/src/components
          ls -la packages/ui/src/lib 2>/dev/null || echo "No lib files copied"
          ls -la packages/ui/src/hooks 2>/dev/null || echo "No hooks copied"
          ls -la packages/ui/src/styles 2>/dev/null || echo "No styles copied"

      - name: Add timestamp to ensure differences
        run: |
          # 타임스탬프를 포함한 파일 생성으로 항상 main과 차이가 있도록 보장
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          echo "# shadcn/ui v4 sync timestamp: $TIMESTAMP" > packages/ui/src/SYNC_TIMESTAMP.md
          echo "Last synced from shadcn/ui v4 on $TIMESTAMP" >> packages/ui/src/SYNC_TIMESTAMP.md
          echo "Repository: https://github.com/shadcn-ui/ui" >> packages/ui/src/SYNC_TIMESTAMP.md
          echo "Sync workflow run: $GITHUB_RUN_ID" >> packages/ui/src/SYNC_TIMESTAMP.md

      - name: Clean up temporary files
        run: rm -rf tmp-shadcn-ui

      - name: Check for changes
        id: changes
        run: |
          git status
          # Check if there's anything to commit
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes detected"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.branch_name }}"
          TIMESTAMP=$(date +"%Y-%m-%d")

          git add .
          git commit -m "chore: sync shadcn/ui v4 components for monorepo [$TIMESTAMP]"

          echo "Pushing changes to $BRANCH_NAME branch..."
          if git push -u origin "$BRANCH_NAME"; then
            echo "Push successful"
          else
            echo "Push failed"
            exit 1
          fi

      - name: Install GitHub CLI
        if: steps.changes.outputs.changes == 'true'
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Create Pull Request
        if: steps.changes.outputs.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ steps.branch.outputs.branch_name }}
        run: |
          TITLE="chore: sync shadcn/ui v4 components for monorepo [$(date +%Y-%m-%d)]"

          # PR 본문 생성
          echo "Creating PR body file..."
          PR_BODY_FILE=$(mktemp)
          cat > "$PR_BODY_FILE" << EOL
          # shadcn/ui v4 컴포넌트 동기화

          이 PR은 shadcn/ui v4의 monorepo 템플릿에서 컴포넌트, 유틸리티, 훅, 스타일을 동기화합니다.

          ## 동기화된 항목
          - 컴포넌트 (\`/src/components/\`)
          - 유틸리티 (\`/src/lib/\`)
          - 훅 (\`/src/hooks/\`)
          - 스타일 (\`/src/styles/\`)

          ## Tailwind CSS v4 호환성

          이 PR은 Tailwind CSS v4와 호환되도록 업데이트되었습니다.

          변경사항을 검토하고 필요한 경우 수정 후 머지해주세요.

          동기화 타임스탬프: $(date +"%Y-%m-%d %H:%M:%S")
          워크플로우 실행 ID: ${GITHUB_RUN_ID}
          EOL

          echo "Creating PR from branch $BRANCH_NAME to main..."

          # 라벨 없이 PR 생성 (라벨 오류 회피)
          PR_URL=$(gh pr create --base main --head "$BRANCH_NAME" --title "$TITLE" --body-file "$PR_BODY_FILE")

          if [ $? -eq 0 ]; then
            echo "PR created successfully: $PR_URL"
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

            # 라벨 추가 시도 (실패해도 계속 진행)
            echo "Trying to add labels..."
            gh pr edit "$BRANCH_NAME" --add-label "enhancement" || echo "Could not add enhancement label, continuing..."
          else
            echo "Failed to create PR"
            exit 1
          fi
